var search_data = {"index":{"searchIndex":["aboutcontroller","applicationcontroller","applicationhelper","authorization","calendarcontroller","calendarhelper","dailywod","dashboardhelper","dashboardscontroller","event","eventcolor","eventscontroller","eventshelper","exercise","exercisecategory","exerciseworkout","exercisescontroller","exerciseshelper","goal","goalscontroller","goalshelper","healthrecord","healthrecordscontroller","healthrecordshelper","homecontroller","homehelper","injuryrecord","injuryrecordscontroller","injuryrecordshelper","passwordresetshelper","personalrecord","personalrecordscontroller","personalrecordshelper","profile","profilehelper","profilescontroller","sessionscontroller","sessionshelper","statscontroller","statshelper","trainer","trainerhelper","trainerscontroller","user","userhelper","usersessionhelper","usersessionshelper","workout","workoutcategory","workouthelper","workoutrecord","workoutrecordscontroller","workoutrecordshelper","workoutscontroller","at_least_one_health_metric()","at_least_one_metric()","at_least_one_metric()","blue()","check_status?()","complete?()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_from_hash()","create_from_hash!()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","end_at()","event_calendar()","event_calendar_opts()","failure()","fbpost()","fetch_fb_graph_user()","find_from_hash()","find_or_new_by_category()","find_or_new_by_category()","get_all_records_for()","get_record_for()","green()","height()","height=()","height_str()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","month_link()","needs_units()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open_graph()","pink()","red()","select_custom_exercises()","select_custom_workouts()","select_official_categories()","select_official_categories()","select_official_exercises()","select_official_workouts()","severity_within_bounds()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","systolic_and_diastolic_present_together()","time()","time=()","update()","update()","update()","update()","update()","update()","update()","update()","valid_category()","readme_for_app"],"longSearchIndex":["aboutcontroller","applicationcontroller","applicationhelper","authorization","calendarcontroller","calendarhelper","dailywod","dashboardhelper","dashboardscontroller","event","eventcolor","eventscontroller","eventshelper","exercise","exercisecategory","exerciseworkout","exercisescontroller","exerciseshelper","goal","goalscontroller","goalshelper","healthrecord","healthrecordscontroller","healthrecordshelper","homecontroller","homehelper","injuryrecord","injuryrecordscontroller","injuryrecordshelper","passwordresetshelper","personalrecord","personalrecordscontroller","personalrecordshelper","profile","profilehelper","profilescontroller","sessionscontroller","sessionshelper","statscontroller","statshelper","trainer","trainerhelper","trainerscontroller","user","userhelper","usersessionhelper","usersessionshelper","workout","workoutcategory","workouthelper","workoutrecord","workoutrecordscontroller","workoutrecordshelper","workoutscontroller","healthrecord#at_least_one_health_metric()","exercise#at_least_one_metric()","workoutrecord#at_least_one_metric()","eventcolor::blue()","goal#check_status?()","goal#complete?()","exercisescontroller#create()","goalscontroller#create()","healthrecordscontroller#create()","injuryrecordscontroller#create()","profilescontroller#create()","sessionscontroller#create()","trainerscontroller#create()","workoutrecordscontroller#create()","workoutscontroller#create()","authorization::create_from_hash()","user::create_from_hash!()","exercisescontroller#destroy()","goalscontroller#destroy()","healthrecordscontroller#destroy()","injuryrecordscontroller#destroy()","sessionscontroller#destroy()","trainerscontroller#destroy()","workoutrecordscontroller#destroy()","workoutscontroller#destroy()","exercisescontroller#edit()","goalscontroller#edit()","healthrecordscontroller#edit()","injuryrecordscontroller#edit()","profilescontroller#edit()","trainerscontroller#edit()","workoutrecordscontroller#edit()","workoutscontroller#edit()","event#end_at()","calendarhelper#event_calendar()","calendarhelper#event_calendar_opts()","sessionscontroller#failure()","workoutrecordscontroller#fbpost()","profile::fetch_fb_graph_user()","authorization::find_from_hash()","exercisecategory::find_or_new_by_category()","workoutcategory::find_or_new_by_category()","personalrecord::get_all_records_for()","personalrecord::get_record_for()","eventcolor::green()","profile#height()","profile#height=()","profile#height_str()","aboutcontroller#index()","calendarcontroller#index()","eventscontroller#index()","exercisescontroller#index()","goalscontroller#index()","healthrecordscontroller#index()","homecontroller#index()","injuryrecordscontroller#index()","personalrecordscontroller#index()","statscontroller#index()","trainerscontroller#index()","workoutrecordscontroller#index()","workoutscontroller#index()","calendarhelper#month_link()","exercise#needs_units()","exercisescontroller#new()","goalscontroller#new()","healthrecordscontroller#new()","injuryrecordscontroller#new()","profilescontroller#new()","sessionscontroller#new()","trainerscontroller#new()","workoutrecordscontroller#new()","workoutscontroller#new()","profile::open_graph()","eventcolor::pink()","eventcolor::red()","exercise::select_custom_exercises()","workout::select_custom_workouts()","exercisecategory::select_official_categories()","workoutcategory::select_official_categories()","exercise::select_official_exercises()","workout::select_official_workouts()","injuryrecord#severity_within_bounds()","dashboardscontroller#show()","eventscontroller#show()","exercisescontroller#show()","goalscontroller#show()","healthrecordscontroller#show()","injuryrecordscontroller#show()","personalrecordscontroller#show()","profilescontroller#show()","trainerscontroller#show()","workoutrecordscontroller#show()","workoutscontroller#show()","healthrecord#systolic_and_diastolic_present_together()","workoutrecord#time()","workoutrecord#time=()","exercisescontroller#update()","goalscontroller#update()","healthrecordscontroller#update()","injuryrecordscontroller#update()","profilescontroller#update()","trainerscontroller#update()","workoutrecordscontroller#update()","workoutscontroller#update()","workoutcategory#valid_category()",""],"info":[["AboutController","","AboutController.html","","<p>Controller to generate the About Us page. Does not require login.\n"],["ApplicationController","","ApplicationController.html","","<p>ApplicationController handles the require_login filter for pages that\nrequire authentication and defines …\n"],["ApplicationHelper","","ApplicationHelper.html","",""],["Authorization","","Authorization.html","","<p>Special model for OmniAuth integration.\n"],["CalendarController","","CalendarController.html","","<p>CalendarController renders a calendar with the current user’s Events, which\nare tied to Goals, InjuryRecords …\n"],["CalendarHelper","","CalendarHelper.html","",""],["DailyWod","","DailyWod.html","","<p>Encapsulates the rake’d daily_wods table and defines accessors for title,\nlink, description, and date …\n"],["DashboardHelper","","DashboardHelper.html","",""],["DashboardsController","","DashboardsController.html","","<p>DashboardsController handles rendering the dashboard view and pulls today’s\nWOD.\n"],["Event","","Event.html","","<p>Polymorphic model to store events for Goal, WorkoutRecord, and InjuryRecord\nand render in the calendar. …\n"],["EventColor","","EventColor.html","","<p>Color definitions for calendar.\n"],["EventsController","","EventsController.html","","<p>EventsController handles index and show for Events and acts somewhat as\nglue to allow viewing of corresponding …\n"],["EventsHelper","","EventsHelper.html","",""],["Exercise","","Exercise.html","","<p>Records information on CrossFit exercise elements, both custom and\nofficial.\n"],["ExerciseCategory","","ExerciseCategory.html","","<p>Model for a category of exercises.\n"],["ExerciseWorkout","","ExerciseWorkout.html","","<p>Join model for workouts and exercises.\n"],["ExercisesController","","ExercisesController.html","","<p>ExerciseController handles CRUD for Exercises, both custom and built-in.\nBuilt-in predefined exercises …\n"],["ExercisesHelper","","ExercisesHelper.html","",""],["Goal","","Goal.html","","<p>Models a Goal, which stores a name, description, status, and deadline. Goal\nis schedulable and automatically …\n"],["GoalsController","","GoalsController.html","","<p>GoalsController handles CRUD for Goals and doesn’t really do anything\ninteresting.\n"],["GoalsHelper","","GoalsHelper.html","",""],["HealthRecord","","HealthRecord.html","","<p>Records health-related metrics: blood pressure, weight, heart rate, and\ncalories consumed over time. …\n"],["HealthRecordsController","","HealthRecordsController.html","","<p>Handles CRUD for HealthRecords.\n"],["HealthRecordsHelper","","HealthRecordsHelper.html","",""],["HomeController","","HomeController.html","","<p>Renders the home page.\n"],["HomeHelper","","HomeHelper.html","",""],["InjuryRecord","","InjuryRecord.html","","<p>Records injury-related information. Attaches an Event to this record with\nthe  build_injury_event and …\n"],["InjuryRecordsController","","InjuryRecordsController.html","","<p>Handles CRUD for InjuryRecords.\n"],["InjuryRecordsHelper","","InjuryRecordsHelper.html","",""],["PasswordResetsHelper","","PasswordResetsHelper.html","",""],["PersonalRecord","","PersonalRecord.html","","<p>Calculates and stores personal bests for different workouts.\n"],["PersonalRecordsController","","PersonalRecordsController.html","","<p>Shows all-time records for each workout for each user.\n"],["PersonalRecordsHelper","","PersonalRecordsHelper.html","",""],["Profile","","Profile.html","","<p>Stores profile biographical information and hooks in with the Facebook\ngraph.\n"],["ProfileHelper","","ProfileHelper.html","",""],["ProfilesController","","ProfilesController.html","","<p>Handles CRUD and Facebook integration for Profiles.\n"],["SessionsController","","SessionsController.html","","<p>Handles session creation and authentication.\n"],["SessionsHelper","","SessionsHelper.html","",""],["StatsController","","StatsController.html","","<p>Renders graphs for the current user with LazyHighCharts.\n"],["StatsHelper","","StatsHelper.html","",""],["Trainer","","Trainer.html","","<p>Stores trainer info.\n"],["TrainerHelper","","TrainerHelper.html","",""],["TrainersController","","TrainersController.html","","<p>Handles CRUD for trainer info.\n"],["User","","User.html","","<p>Stores user info (email and username) and relates all personal data.\n"],["UserHelper","","UserHelper.html","",""],["UserSessionHelper","","UserSessionHelper.html","",""],["UserSessionsHelper","","UserSessionsHelper.html","",""],["Workout","","Workout.html","","<p>Stores data for built-in and custom workouts.\n"],["WorkoutCategory","","WorkoutCategory.html","","<p>Stores a category for workouts\n"],["WorkoutHelper","","WorkoutHelper.html","",""],["WorkoutRecord","","WorkoutRecord.html","","<p>Stores information for a particular workout session. Automatically creates\na corresponding Event with …\n"],["WorkoutRecordsController","","WorkoutRecordsController.html","","<p>Handles CRUD for workout records.\n"],["WorkoutRecordsHelper","","WorkoutRecordsHelper.html","",""],["WorkoutsController","","WorkoutsController.html","","<p>Handles CRUD for workouts, custom and built-in. Built-in predefined\nworkouts are referred to as “official”. …\n"],["at_least_one_health_metric","HealthRecord","HealthRecord.html#method-i-at_least_one_health_metric","()","<p>Validation to ensure that at least one metric was provided\n"],["at_least_one_metric","Exercise","Exercise.html#method-i-at_least_one_metric","()","<p>Validates that this model contains at least piece of useful information.\nOne of: repetitions, weight, …\n"],["at_least_one_metric","WorkoutRecord","WorkoutRecord.html#method-i-at_least_one_metric","()","<p>Ensures that at least one workout metrics was provided.\n"],["blue","EventColor","EventColor.html#method-c-blue","()",""],["check_status?","Goal","Goal.html#method-i-check_status-3F","()","<p>Returns true if the status is valid.\n"],["complete?","Goal","Goal.html#method-i-complete-3F","()","<p>Returns true if this goal was marked completed.\n"],["create","ExercisesController","ExercisesController.html#method-i-create","()","<p>create a new exercise\n"],["create","GoalsController","GoalsController.html#method-i-create","()","<p>create a new goal\n"],["create","HealthRecordsController","HealthRecordsController.html#method-i-create","()","<p>create a new health record\n"],["create","InjuryRecordsController","InjuryRecordsController.html#method-i-create","()","<p>create a new injury record\n"],["create","ProfilesController","ProfilesController.html#method-i-create","()","<p>Create a profile from POST request.\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>Creates a session by handling callback from OmniAuth at /auth/facebook and\nredirects to dashboard if …\n"],["create","TrainersController","TrainersController.html#method-i-create","()","<p>create a new trainer\n"],["create","WorkoutRecordsController","WorkoutRecordsController.html#method-i-create","()","<p>create a new workout record\n"],["create","WorkoutsController","WorkoutsController.html#method-i-create","()","<p>create a new workout\n"],["create_from_hash","Authorization","Authorization.html#method-c-create_from_hash","(hash, user = nil)","<p>Creates a new authorization for a user from the passed hash.\n"],["create_from_hash!","User","User.html#method-c-create_from_hash-21","(hash)","<p>Creates a new user from the passed hash\n"],["destroy","ExercisesController","ExercisesController.html#method-i-destroy","()","<p>delete a specific exercise\n"],["destroy","GoalsController","GoalsController.html#method-i-destroy","()","<p>delete a specific goal\n"],["destroy","HealthRecordsController","HealthRecordsController.html#method-i-destroy","()","<p>delete a specific health record\n"],["destroy","InjuryRecordsController","InjuryRecordsController.html#method-i-destroy","()","<p>delete a specific injury\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>Destroys a session and logs out the user by resetting the session.\n"],["destroy","TrainersController","TrainersController.html#method-i-destroy","()","<p>delete a specific trainer\n"],["destroy","WorkoutRecordsController","WorkoutRecordsController.html#method-i-destroy","()","<p>delete a specific workout record\n"],["destroy","WorkoutsController","WorkoutsController.html#method-i-destroy","()","<p>delete a specific workout\n"],["edit","ExercisesController","ExercisesController.html#method-i-edit","()","<p>return a form to edit a exercise\n"],["edit","GoalsController","GoalsController.html#method-i-edit","()","<p>return a form to edit a goal\n"],["edit","HealthRecordsController","HealthRecordsController.html#method-i-edit","()","<p>return a form to edit a health record\n"],["edit","InjuryRecordsController","InjuryRecordsController.html#method-i-edit","()","<p>Edit the injury by id\n"],["edit","ProfilesController","ProfilesController.html#method-i-edit","()","<p>Edit an existing profile, using current data to pre-fill the form.\n"],["edit","TrainersController","TrainersController.html#method-i-edit","()","<p>return a form to edit a trainer\n"],["edit","WorkoutRecordsController","WorkoutRecordsController.html#method-i-edit","()","<p>return a form to edit a workout record\n"],["edit","WorkoutsController","WorkoutsController.html#method-i-edit","()","<p>return a form to edit a workout\n"],["end_at","Event","Event.html#method-i-end_at","()","<p>Returns the event’s end_at date, or today’s date if end_at is nil.\n"],["event_calendar","CalendarHelper","CalendarHelper.html#method-i-event_calendar","()",""],["event_calendar_opts","CalendarHelper","CalendarHelper.html#method-i-event_calendar_opts","()","<p>custom options for this calendar\n"],["failure","SessionsController","SessionsController.html#method-i-failure","()","<p>This is not supposed to happen, but handles fail callbacks from OmniAuth.\n"],["fbpost","WorkoutRecordsController","WorkoutRecordsController.html#method-i-fbpost","()","<p>hacky way of fb wall sharing.\n"],["fetch_fb_graph_user","Profile","Profile.html#method-c-fetch_fb_graph_user","(graph)","<p>Gets a User object from the Graph\n"],["find_from_hash","Authorization","Authorization.html#method-c-find_from_hash","(hash)","<p>Selects a user’s Authorization model from a hash defining :provider and\n:uid.\n"],["find_or_new_by_category","ExerciseCategory","ExerciseCategory.html#method-c-find_or_new_by_category","(category)","<p>Finds a pre-defined category and creates it if it doesn’t exist.\n"],["find_or_new_by_category","WorkoutCategory","WorkoutCategory.html#method-c-find_or_new_by_category","(category)","<p>Finds <code>category</code> or creates a new one if it was not found.\n"],["get_all_records_for","PersonalRecord","PersonalRecord.html#method-c-get_all_records_for","(user_id)",""],["get_record_for","PersonalRecord","PersonalRecord.html#method-c-get_record_for","(user_id, workout_id)",""],["green","EventColor","EventColor.html#method-c-green","()",""],["height","Profile","Profile.html#method-i-height","()","<p>Returns a hash of feet and inches representing the height.\n"],["height=","Profile","Profile.html#method-i-height-3D","(val)","<p>converts value to height in inches\n"],["height_str","Profile","Profile.html#method-i-height_str","()","<p>converts height in inches value to a string string format is: [feet]‘“\n"],["index","AboutController","AboutController.html#method-i-index","()","<p>Renders the About Us page.\n"],["index","CalendarController","CalendarController.html#method-i-index","()","<p>Render a calendar for the current month, or the month passed in params and\nparams.\n"],["index","EventsController","EventsController.html#method-i-index","()","<p>Shows all of the current user’s events\n"],["index","ExercisesController","ExercisesController.html#method-i-index","()","<p>display list of all exercises\n"],["index","GoalsController","GoalsController.html#method-i-index","()","<p>display list of all goals\n"],["index","HealthRecordsController","HealthRecordsController.html#method-i-index","()","<p>display list of all health records for a user\n"],["index","HomeController","HomeController.html#method-i-index","()","<p>Renders the home page or redirects to dashboard if user is logged in.\n"],["index","InjuryRecordsController","InjuryRecordsController.html#method-i-index","()","<p>display list of all injuries\n"],["index","PersonalRecordsController","PersonalRecordsController.html#method-i-index","()","<p>display list of all personal records associated with user\n"],["index","StatsController","StatsController.html#method-i-index","()","<p>Render graphs for WorkoutRecords points and times, HealthRecords blood\npressure, and HealthRecords weight …\n"],["index","TrainersController","TrainersController.html#method-i-index","()","<p>display list of all trainers associated with user\n"],["index","WorkoutRecordsController","WorkoutRecordsController.html#method-i-index","()","<p>display list of all workout records\n"],["index","WorkoutsController","WorkoutsController.html#method-i-index","()","<p>display list of all workout\n"],["month_link","CalendarHelper","CalendarHelper.html#method-i-month_link","(month_date)",""],["needs_units","Exercise","Exercise.html#method-i-needs_units","()","<p>Validates that the correct units were supplied for fields that\nconditionally require it.\n"],["new","ExercisesController","ExercisesController.html#method-i-new","()","<p>return an HTML form to add new exercise\n"],["new","GoalsController","GoalsController.html#method-i-new","()","<p>return an HTML form to add new goal\n"],["new","HealthRecordsController","HealthRecordsController.html#method-i-new","()","<p>return an HTML form to add a health record\n"],["new","InjuryRecordsController","InjuryRecordsController.html#method-i-new","()",""],["new","ProfilesController","ProfilesController.html#method-i-new","()","<p>Render a form to create a new profile and get a Graph API instance to pull\ndata and prefill the form …\n"],["new","SessionsController","SessionsController.html#method-i-new","()","<p>Render login page\n"],["new","TrainersController","TrainersController.html#method-i-new","()","<p>return an HTML form to add new trainer\n"],["new","WorkoutRecordsController","WorkoutRecordsController.html#method-i-new","()","<p>return an HTML form to add new workout record\n"],["new","WorkoutsController","WorkoutsController.html#method-i-new","()","<p>return an HTML form to add new workout\n"],["open_graph","Profile","Profile.html#method-c-open_graph","(token)","<p>Creates a new Graph API connection through Koala with the provided token.\n"],["pink","EventColor","EventColor.html#method-c-pink","()",""],["red","EventColor","EventColor.html#method-c-red","()",""],["select_custom_exercises","Exercise","Exercise.html#method-c-select_custom_exercises","(user_id)","<p>Returns all of this user’s custom exercises.\n"],["select_custom_workouts","Workout","Workout.html#method-c-select_custom_workouts","(user_id)","<p>Returns all custom workouts for user_id\n"],["select_official_categories","ExerciseCategory","ExerciseCategory.html#method-c-select_official_categories","()","<p>Returns all official pre-defined categories.\n"],["select_official_categories","WorkoutCategory","WorkoutCategory.html#method-c-select_official_categories","()","<p>Returns all built-in official categories.\n"],["select_official_exercises","Exercise","Exercise.html#method-c-select_official_exercises","()","<p>Returns all “official” predefined exercises.\n"],["select_official_workouts","Workout","Workout.html#method-c-select_official_workouts","()","<p>Returns all official workouts\n"],["severity_within_bounds","InjuryRecord","InjuryRecord.html#method-i-severity_within_bounds","()","<p>Ensures that the provided severity value is between 1 and 10 inclusive.\n"],["show","DashboardsController","DashboardsController.html#method-i-show","()","<p>Renders the dashboard with the daily WOD.\n"],["show","EventsController","EventsController.html#method-i-show","()","<p>View an individual event.\n"],["show","ExercisesController","ExercisesController.html#method-i-show","()","<p>display a specific exercise\n"],["show","GoalsController","GoalsController.html#method-i-show","()","<p>display a specific goal\n"],["show","HealthRecordsController","HealthRecordsController.html#method-i-show","()","<p>display a specific health record\n"],["show","InjuryRecordsController","InjuryRecordsController.html#method-i-show","()","<p>display a specific injury\n"],["show","PersonalRecordsController","PersonalRecordsController.html#method-i-show","()","<p>show the personal record\n"],["show","ProfilesController","ProfilesController.html#method-i-show","()","<p>Show a user’s profile by id. Shows the current user if id == ‘me’\n"],["show","TrainersController","TrainersController.html#method-i-show","()","<p>show the trainer\n"],["show","WorkoutRecordsController","WorkoutRecordsController.html#method-i-show","()","<p>display a specific workout record\n"],["show","WorkoutsController","WorkoutsController.html#method-i-show","()","<p>display a specific workout\n"],["systolic_and_diastolic_present_together","HealthRecord","HealthRecord.html#method-i-systolic_and_diastolic_present_together","()","<p>Ensures that both systolic and diastolic readings were provided if defining\nblood pressure.\n"],["time","WorkoutRecord","WorkoutRecord.html#method-i-time","()","<p>Returns a hash containing :hours, :minutes, and :seconds representing the\ntime, and also :string, which …\n"],["time=","WorkoutRecord","WorkoutRecord.html#method-i-time-3D","(val)","<p>Takes a hash of hours, minutes, and seconds and converts to seconds.\n"],["update","ExercisesController","ExercisesController.html#method-i-update","()","<p>update a specific exercise\n"],["update","GoalsController","GoalsController.html#method-i-update","()","<p>update a specific goal\n"],["update","HealthRecordsController","HealthRecordsController.html#method-i-update","()","<p>update a specific health record\n"],["update","InjuryRecordsController","InjuryRecordsController.html#method-i-update","()","<p>update a specific injury\n"],["update","ProfilesController","ProfilesController.html#method-i-update","()","<p>Update an existing profile record from PUT request.\n"],["update","TrainersController","TrainersController.html#method-i-update","()","<p>update a specific trainer\n"],["update","WorkoutRecordsController","WorkoutRecordsController.html#method-i-update","()","<p>update a specific workout record\n"],["update","WorkoutsController","WorkoutsController.html#method-i-update","()","<p>update a specific workout\n"],["valid_category","WorkoutCategory","WorkoutCategory.html#method-i-valid_category","()","<p>Validates if the category is allowed.\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}